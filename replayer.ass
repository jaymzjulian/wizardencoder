
*=$3000

inputdata=$fe

getval	.macro
	; then command
	ldy #0
	lda (inputdata),y
	pha
	inc inputdata
	lda inputdata
	bne *+4
	inc inputdata+1
	pla
.endmacro

omgponies
	lda #0
	sta $d020
	sta $d021
	lda #0
	ldx #24
sidResetLoop
	sta $d400,x
	dex
	bne sidResetLoop

	; initial sid as per encoder
	lda #15
	sta $d418
	lda #8
	sta $d403
	sta $d403+7
	sta $d403+14

	lda #<alldata
	sta inputdata
	lda #>alldata
	sta inputdata+1

	; iterate through data!
	ldy #0
sidread
	lda #$f3
rasterloop
	cmp $d012
	bne rasterloop
	inc $d020
	jsr decodeloop
	dec $d020
	jmp sidread

decodeloop
	; first channel - put the channel base into x
	; for now
	getval
	sta cmdtemp
	cmp #$ff
	bne moreframe
	rts
moreframe

	getval
	sta valtemp

	; bits 4 through 7 are channel
	lda cmdtemp
	lsr
	lsr
	lsr
	lsr
	and #3
	tax
	lda ctab,x
	tax

	; command is in low 4 bits
	lda cmdtemp
	and #$f
        ; set_ad
        cmp #0
        beq set_ad
        cmp #1
        beq set_sr
        cmp #2
        beq set_freq
        cmp #3
        beq set_ctrl
        cmp #4
        beq set_pw

set_ctrl
	ldy valtemp
	lda ctrltab,y
	sta $d404,x
	jmp finalise

set_ad
	lda valtemp
	sta $d405,x
	jmp finalise
	
set_sr
	lda valtemp
	sta $d406,x
	jmp finalise

set_freq
	ldy valtemp
	lda sflo,y
	sta $d400,x
	lda sfhi,y
	sta $d401,x
	jmp finalise
set_pw
	lda valtemp
	lsr
	lsr
	lsr
	lsr
	sta $d403,x
	lda valtemp
	asl
	asl
	asl
	asl
	sta $d402,x
	jmp finalise

finalise
	lda cmdtemp
	and #$80
	cmp #0
	bne exitme
	jmp decodeloop
exitme
	rts

ohno	
	inc $d020
	inc $d021
	jmp ohno


cmdtemp
	.byte 0
valtemp
	.byte 0
	
ctab
	.byte 0,7,14

	.include "freqtable.ass"

alldata
	.include "test.asm"

ctrltab
.byte	$10, $20, $40, $80
.byte        $11, $21, $41, $81
.byte        $12, $22, $42, $82
.byte        $13, $23, $43, $83
.byte        $14, $24, $44, $84
.byte        $15, $25, $45, $85
